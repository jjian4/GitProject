const express = require('express');
const axios = require('axios');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user');
const HttpError = require('../models/http-error.js');
const _ = require('lodash');

const router = express.Router();

router.get('/', async (req, res, next) => {
    // Will get info about logged in user
});

router.post('/login', async (req, res, next) => {
    const { email, password } = req.body;

    let existingUser;
    // Check Email
    try {
        existingUser = await User.findOne({ email: email });
    } catch (err) {
        return next(new HttpError('Logging in failed, please try again.', 500));
    }

    if (!existingUser) {
        return next(new HttpError('Invalid credentials. Cannot log in.', 401));
    }

    // Check Password
    let passwordIsValid;
    try {
        passwordIsValid = await bcrypt.compare(password, existingUser.password);
    } catch {
        return next(new HttpError('Logging in failed, please try again.', 500));
    }
    if (!passwordIsValid) {
        return next(new HttpError('Invalid credentials. Cannot log in.', 401));
    }

    // Make token
    let token;
    try {
        token = jwt.sign({ userId: existingUser.id }, process.env.JWT_KEY, {
            expiresIn: '1h'
        });
    } catch {
        return next(new HttpError('Logging in failed, please try again.', 500));
    }

    res.json({
        userId: existingUser.id,
        token
    });
});

router.post('/register', async (req, res, next) => {
    const { name, email, password } = req.body;

    let existingUser;
    // Check email
    try {
        existingUser = await User.findOne({ email: email });
    } catch (err) {
        return next(
            new HttpError('Signing up failed, please try again 1.', 500)
        );
    }
    if (existingUser) {
        return next(
            new HttpError('User exists already, please login instead.', 422)
        );
    }

    // Hash password
    let hashedPassword;
    try {
        hashedPassword = await bcrypt.hash(password, 12);
    } catch {
        return next(
            new HttpError('Signing up failed, please try again 2.', 500)
        );
    }

    const createdUser = new User({
        name,
        email,
        password: hashedPassword
    });

    // Save to DB
    try {
        await createdUser.save();
    } catch (err) {
        return next(
            new HttpError('Signing up failed, please try again 3.', 500)
        );
    }

    // Make token
    // Note: createdUser.id was generated by Mongodb
    let token;
    try {
        token = jwt.sign({ userId: createdUser.id }, process.env.JWT_KEY, {
            expiresIn: '1h'
        });
    } catch {
        return next(
            new HttpError('Signing up failed, please try again 4.', 500)
        );
    }

    res.status(201).json({ userId: createdUser.id, token });
});

module.exports = router;
